# collectors.yml

# html scrappers
scrapper: []
  # - name: TakeIchiConvoyStats
  #   interval: Y1 # see model.py for available intervals
  #   resource_type: value # value (inplace document), series, timeseries
  #   target: https://en.wikipedia.org/wiki/Take_Ichi_convoy
  #   data:
  #     - name: Dates
  #       type: string
  #       selector: //*[@id="mw-content-text"]/div[1]/div[2]/div/table/tbody/tr[4]/td/table/tbody/tr[1]/td # css selector or xpath
  #     - name: AmericanTroups
  #       type: string
  #       selector: //*[@id="mw-content-text"]/div[1]/div[2]/div/table/tbody/tr[10]/td[1]
  #     - name: JapaneseTroups
  #       type: string
  #       selector: //*[@id="mw-content-text"]/div[1]/div[2]/div/table/tbody/tr[10]/td[2]
  #     - name: AmericanCasualties
  #       type: string
  #       selector: //*[@id="mw-content-text"]/div[1]/div[2]/div/table/tbody/tr[12]/td[1]
  #     - name: JapaneseCasualties
  #       type: string
  #       selector: //*[@id="mw-content-text"]/div[1]/div[2]/div/table/tbody/tr[12]/td[2]

# rest api collectors
http_api:
  - name: CoingeckoFeeds
    interval: s30
    resource_type: timeseries
    target: https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,staked-ether,binancecoin,avalanche-2,wrapped-bitcoin,ripple,solana,the-open-network,polkadot,cardano,bitcoin-cash,matic-network,aptos,first-digital-usd,cosmos,mantle,optimism,arbitrum,sui,arweave,monero,ethena-usde,fantom,celestia,thorchain,coredaoorg,sei-network,usd-coin,tether,frax,dai,manta-network,celo,dogecoin,pepe,shiba-inu,dogwifcoin&vs_currencies=usd
    data:
      - name: USDCUSD
        type: float64
        selector: .usd-coin.usd
        transformers: ["round6"]
      - name: BTCUSDC
        type: float64
        selector: .bitcoin.usd
        transformers: ["{self} * {USDCUSD}", "round2"]
      - name: ETHUSDC
        type: float64
        selector: .ethereum.usd
        transformers: ["{self} * {USDCUSD}", "round2"]
      # - name: DOGEUSDC
      #   type: float64
      #   selector: .dogecoin.usd
      #   transformers: ["{self} * {USDCUSD}", "round6"]
      # - name: PEPEUSDC
      #   type: float64
      #   selector: .pepe.usd
      #   transformers: ["{self} * {USDCUSD}", "round10"]

  - name: OdosFeeds
    interval: s30
    resource_type: timeseries
    target: https://api.odos.xyz/pricing/token/1 # ethereum only
    data:
      - name: USDCUSD
        type: float64
        selector: .tokenPrices.0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48
        transformers: ["round6"]
      - name: BTCUSDC
        type: float64
        selector: .tokenPrices.0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599
        transformers: ["{self} * {USDCUSD}", "round2"]
      - name: ETHUSDC
        type: float64
        selector: .tokenPrices.0x0000000000000000000000000000000000000000
        transformers: ["{self} * {USDCUSD}", "round2"]

  - name: CowSwapFeeds
    interval: s30
    resource_type: timeseries
    data:
      - name: ETHUSDC
        type: float64
        target: https://api.cow.fi/mainnet/api/v1/token/0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48/native_price
        selector: .price
        transformers: ["(1 / {self}) * 1e12", "round2"]
      - name: BTCUSDC
        type: float64
        target: https://api.cow.fi/mainnet/api/v1/token/0x2260fac5e5542a773aa44fbcfedf7c193bc2c599/native_price
        selector: .price
        transformers: ["({self} * {ETHUSDC}) / 1e10", "round2"]

ws_api:
  # - name: CoinMarketcapFeeds
  #   interval: s30
  #   resource_type: timeseries
  #   target: wss://push.coinmarketcap.com/ws?device=web&client_source=home_page
  #   selector: root
  #   headers:
  #     Host: push.coinmarketcap.com
  #     Origin: https://coinmarketcap.com
  #   handler: |
  #     def h(msg, epochs):
  #       d = msg['d']
  #       epochs[0].setdefault(int(d['id']), []).append(float(d['p']))
  #   data:
  #     - name: USDCUSD
  #       type: float64
  #       reducer: "lambda epochs: mean(epochs[0][3408])"
  #       transformers: ["round6"]
  #     - name: BTCUSDC
  #       type: float64
  #       reducer: "lambda epochs: mean(epochs[0][1])"
  #       transformers: ["{self} * {USDCUSD}", "round2"]
  #     - name: ETHUSDC
  #       type: float64
  #       reducer: "lambda epochs: mean(epochs[0][1027])"
  #       transformers: ["{self} * {USDCUSD}", "round2"]

  - name: BinanceFeeds
    interval: s30
    resource_type: timeseries
    selector: root
    handler: |
      def h(msg, epochs):
        cols = ["bids", "asks", "vbids", "vasks"] if msg['m'] else ["asks", "bids", "vasks", "vbids"]  # agg trade buy/sell side ordering
        hp = [epochs[0].setdefault(cols[0], []), epochs[0].setdefault(cols[1], [])]  # agg trades price history
        hv = [epochs[0].setdefault(cols[2], []), epochs[0].setdefault(cols[3], [])]  # agg trades volume history
        p = [float(msg['p']), 0] # prices
        if len(hp[1]) > 1:
          p[1] = hp[1][-1]
        elif len(epochs) > 1:
          p[1] = epochs[1][cols[1]][-1]
        else:
          p[1] = p[0] # bid == ask if no previous trade available
        v = [float(msg['q']), 0] # volumes
        hp[0].append(p[0])
        hp[1].append(p[1])
        hv[0].append(v[0])
        hv[1].append(v[1])

    data:
      - name: USDTUSDC
        type: float64
        target: wss://stream.binance.com:9443/ws/usdcusdt@trade
        reducer: "lambda epochs: 1 / ((mean(epochs[0]['bids']) + mean(epochs[0]['asks'])) / 2)"
        transformers: ["round6"]
        transient: true
      - name: BTCUSDC
        type: float64
        target: wss://stream.binance.com:9443/ws/btcusdt@trade
        reducer: "lambda epochs: (mean(epochs[0]['bids']) + mean(epochs[0]['asks'])) / 2"
        transformers: ["{self} * {USDTUSDC}", "round2"]
      # - name: BTCUSDC_spread
      #   type: float64
      #   target: wss://stream.binance.com:9443/ws/btcusdt@trade
      #   reducer: "lambda epochs: mean(epochs[0]['asks']) - mean(epochs[0]['bids'])"
      #   transformers: ["{self} * {USDTUSDC}", "round2"]
      - name: ETHUSDC
        type: float64
        target: wss://stream.binance.com:9443/ws/ethusdt@trade
        reducer: "lambda epochs: (mean(epochs[0]['bids']) + mean(epochs[0]['asks'])) / 2"
        transformers: ["{self} * {USDTUSDC}", "round2"]
      # - name: ETHUSDC_spread
      #   type: float64
      #   target: wss://stream.binance.com:9443/ws/ethusdt@trade
      #   reducer: "lambda epochs: mean(epochs[0]['asks']) - mean(epochs[0]['bids'])"
      #   transformers: ["{self} * {USDTUSDC}", "round2"]

  - name: BybitFeeds
    interval: s30
    resource_type: timeseries
    target: wss://stream.bybit.com/v5/public/spot
    selector: .data
    params: { req_id: "", op: "subscribe", args: ["publicTrade.USDCUSDT", "publicTrade.BTCUSDT", "publicTrade.ETHUSDT"] }
    handler: |
      def h(msg, epochs):
        msg = msg[0]
        sym = msg['s']
        epoch = epochs[0].setdefault(sym, {})
        cols = ["bids", "asks", "vbids", "vasks"] if msg['S'].lower() == 'buy' else ["asks", "bids", "vasks", "vbids"]
        hp = [epoch.setdefault(cols[0], []), epoch.setdefault(cols[1], [])]
        hv = [epoch.setdefault(cols[2], []), epoch.setdefault(cols[3], [])]
        p = [float(msg['p']), 0]
        if len(hp[1]) > 1:
          p[1] = hp[1][-1]
        elif len(epochs) > 1:
          p[1] = epochs[1][sym][cols[1]][-1]
        else:
          p[1] = p[0]
        v = [float(msg['v']), 0]
        hp[0].append(p[0])
        hp[1].append(p[1])
        hv[0].append(v[0])
        hv[1].append(v[1])

    data:
      - name: USDTUSDC
        type: float64
        reducer: "lambda epochs: 1 / ((mean(epochs[0]['USDCUSDT']['bids']) + mean(epochs[0]['USDCUSDT']['asks'])) / 2)"
        transformers: ["round6"]
        transient: true
      - name: BTCUSDC
        type: float64
        reducer: "lambda epochs: (mean(epochs[0]['BTCUSDT']['bids']) + mean(epochs[0]['BTCUSDT']['asks'])) / 2"
        transformers: ["{self} * {USDTUSDC}", "round2"]
      - name: ETHUSDC
        type: float64
        reducer: "lambda epochs: (mean(epochs[0]['ETHUSDT']['bids']) + mean(epochs[0]['ETHUSDT']['asks'])) / 2"
        transformers: ["{self} * {USDTUSDC}", "round2"]

  - name: CoinbaseFeeds
    interval: s30
    resource_type: timeseries
    target: wss://ws-feed.exchange.coinbase.com
    selector: root
    params: { type: "subscribe", product_ids: ["BTC-USD", "ETH-USD", "USDT-USD", "USDT-USDC"], channels: ["ticker"] }
    handler: |
      def h(msg, epochs):
        sym = msg['product_id']
        epoch = epochs[0].setdefault(sym, {})
        cols = ["bids", "asks", "vbids", "vasks"] if msg['side'] == 'buy' else ["asks", "bids", "vasks", "vbids"]
        hp = [epoch.setdefault(cols[0], []), epoch.setdefault(cols[1], [])]
        hv = [epoch.setdefault(cols[2], []), epoch.setdefault(cols[3], [])]
        p = [float(msg['price']), 0]
        if len(hp[1]) > 1:
          p[1] = hp[1][-1]
        elif len(epochs) > 1:
          p[1] = epochs[1][sym][cols[1]][-1]
        else:
          p[1] = p[0]
        v = [float(msg['last_size']), 0]
        hp[0].append(p[0])
        hp[1].append(p[1])
        hv[0].append(v[0])
        hv[1].append(v[1])

    data:
      - name: USDUSDT
        type: float64
        reducer: "lambda epochs: 1 / ((mean(epochs[0]['USDT-USD']['bids']) + mean(epochs[0]['USDT-USD']['asks'])) / 2)"
        transformers: ["round6"]
        transient: true
      - name: USDTUSDC
        type: float64
        reducer: "lambda epochs: (mean(epochs[0]['USDT-USDC']['bids']) + mean(epochs[0]['USDT-USDC']['asks'])) / 2"
        transformers: ["round6"]
        transient: true
      - name: USDUSDC
        type: float64
        transformers: ["{USDUSDT} * {USDTUSDC}", "round6"]
        transient: true
      - name: BTCUSDC
        type: float64
        reducer: "lambda epochs: (mean(epochs[0]['BTC-USD']['bids']) + mean(epochs[0]['BTC-USD']['asks'])) / 2"
        transformers: ["{self} * {USDUSDC}", "round2"]
      - name: ETHUSDC
        type: float64
        reducer: "lambda epochs: (mean(epochs[0]['ETH-USD']['bids']) + mean(epochs[0]['ETH-USD']['asks'])) / 2"
        transformers: ["{self} * {USDUSDC}", "round2"]

  # - name: GateFeeds
  #   interval: s30
  #   resource_type: timeseries
  #   target: wss://api.gateio.ws/v4
  #   selector: root
  #   params: { time: "{now}", channel: "spot.trades", event: "subscribe", payload: ["BTC_USDT", "ETH_USDT", "USDC_USDT"] }
  #   handler: |
  #     def h(msg, epochs):
  #       sym = msg['currency_pair']
  #       epoch = epochs[0].setdefault(sym, {})
  #       cols = ["bids", "asks", "vbids", "vasks"] if msg['side'] == 'buy' else ["asks", "bids", "vasks", "vbids"]
  #       hp = [epoch.setdefault(cols[0], []), epoch.setdefault(cols[1], [])]
  #       hv = [epoch.setdefault(cols[2], []), epoch.setdefault(cols[3], [])]
  #       p = [float(msg['price']), 0]
  #       if len(hp[1]) > 1:
  #         p[1] = hp[1][-1]
  #       elif len(epochs) > 1:
  #         p[1] = epochs[1][sym][cols[1]][-1]
  #       else:
  #         p[1] = p[0]
  #       v = [float(msg['amount']), 0]
  #       hp[0].append(p[0])
  #       hp[1].append(p[1])
  #       hv[0].append(v[0])
  #       hv[1].append(v[1])

  #   data:
  #     - name: USDTUSDC
  #       type: float64
  #       reducer: "lambda epochs: 1 / ((mean(epochs[0]['USDC_USDT']['bids']) + mean(epochs[0]['USDC_USDT']['asks'])) / 2)"
  #       transformers: ["round6"]
  #       transient: true
  #     - name: BTCUSDC
  #       type: float64
  #       reducer: "lambda epochs: (mean(epochs[0]['BTC_USDT']['bids']) + mean(epochs[0]['BTC_USDT']['asks'])) / 2"
  #       transformers: ["{self} * {USDTUSDC}", "round2"]
  #     - name: ETHUSDC
  #       type: float64
  #       reducer: "lambda epochs: (mean(epochs[0]['ETH_USDT']['bids']) + mean(epochs[0]['ETH_USDT']['asks'])) / 2"
  #       transformers: ["{self} * {USDTUSDC}", "round2"]

fix_api: []

# evm collectors
evm:

  # oracle prices
  - name: ChainlinkPolyFeeds
    interval: s30
    resource_type: timeseries
    data:
      - name: USDCUSD_decimals
        type: uint8
        target: "137:0xfE4A8cc5b5B2366C1B58Bea3858e81843581b2F7" # chainId:address
        selector: decimals()(uint8)
        transient: true # not stored
      - name: USDCUSD
        type: float64
        target: "137:0xfE4A8cc5b5B2366C1B58Bea3858e81843581b2F7" # chainId:address
        selector: latestRoundData()((uint80,int256,uint256,uint256,uint80))
        transformers: ["{self}[1] / 10 ** {USDCUSD_decimals}", "round6"]
        params: []
      - name: BTCUSD_decimals
        type: uint8
        target: "137:0xc907E116054Ad103354f2D350FD2514433D57F6f"
        selector: decimals()(uint8)
        transient: true
      - name: BTCUSDC
        type: float64
        target: "137:0xc907E116054Ad103354f2D350FD2514433D57F6f" # chainId:address
        selector: latestRoundData()((uint80,int256,uint256,uint256,uint80)) # function signature
        transformers: ["({self}[1] / 10 ** {BTCUSD_decimals}) * {USDCUSD}", "round2"]
        params: []
      - name: ETHUSD_decimals
        type: uint8
        target: "137:0xF9680D99D6C9589e2a93a78A04A279e509205945"
        selector: decimals()(uint8)
        transient: true
      - name: ETHUSDC
        type: float64
        target: "137:0xF9680D99D6C9589e2a93a78A04A279e509205945"
        selector: latestRoundData()((uint80,int256,uint256,uint256,uint80))
        transformers: ["({self}[1] / 10 ** {ETHUSD_decimals}) * {USDCUSD}", "round2"]
        params: []
      # - name: BTCUSDC_median
      #   type: float64
      #   transformers: ["{EvmValue1::median('W1')}"] # no need for selector if the value is computed

  - name: PythArbFeeds # https://docs.pyth.network/price-feeds/contract-addresses/evm
    interval: s30
    resource_type: timeseries
    target: "42161:0xff1a0f4744e8582DF1aE09D5611b887B6a12925C"
    selector: getPriceUnsafe(bytes32)((int64,uint64,int32,uint256))
    data:
      - name: USDCUSD
        type: float64
        params: ["0xeaa020c61cc479712813461ce153894a96a6c00b21ed0cfc2798d1f9a9e9c94a"]
        transformers: ["{self}[0] * 10 ** {self}[2]", "round6"] # price * 10^exponent
        transient: true
      - name: BTCUSDC
        type: float64
        params: ["0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43"]
        transformers: ["({self}[0] * 10 ** {self}[2]) * {USDCUSD}", "round2"]
      - name: ETHUSDC
        type: float64
        params: ["0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace"]
        transformers: ["({self}[0] * 10 ** {self}[2]) * {USDCUSD}", "round2"]

  # ethereum l1 prices
  - name: UniswapEthFeeds
    interval: s30
    resource_type: timeseries
    data:
      - name: ETHUSDC
        type: float64
        target: "1:0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640"
        selector: slot0()((uint160,int24,uint16,uint16,uint16,uint8,bool))
        params: []
        transformers: ["2 ** 192 / ({self}[0] ** 2) * 1e12", "round2"] # inverse of (sqrtPriceX96 / (2**96))**2 * usdc wei per unit
      - name: BTCUSDC # BTCETH * ETHUSDC
        type: float64
        target: "1:0x4585fe77225b41b697c938b018e2ac67ac5a20c0"
        selector: slot0()((uint160,int24,uint16,uint16,uint16,uint8,bool))
        params: []
        transformers: ["((({self}[0] ** 2) / 2 ** 192) / 1e10) * {ETHUSDC}", "round2"]

  # base prices
  - name: AerodromeBaseFeeds
    interval: s30
    resource_type: timeseries
    data:
      - name: ETHUSDC
        type: float64
        target: "8453:0xb2cc224c1c9fee385f8ad6a55b4d94e92359dc59"
        selector: slot0()((uint160,int24,uint16,uint16,uint16,bool)) # v3 fork
        params: []
        transformers: ["({self}[0] ** 2 / 2 ** 192) * 1e12", "round2"] # inverse of (sqrtPriceX96 / (2**96))**2 * usdc wei per unit
      - name: BTCUSDC # tBTCETH * ETHUSDC
        type: float64
        target: "8453:0x2722c8f9b5e2ac72d1f225f8e8c990e449ba0078" # chainId:address
        selector: getReserves()((uint256,uint256,uint256)) # v2 fork
        params: []
        transformers: ["({self}[1] / {self}[0]) * {ETHUSDC}", "round2"]

  - name: UniswapBaseFeeds
    interval: s30
    resource_type: timeseries
    data:
      - name: ETHUSDC
        type: float64
        target: "8453:0xd0b53d9277642d899df5c87a3966a349a798f224"
        selector: slot0()((uint160,int24,uint16,uint16,uint16,uint8,bool))
        params: []
        transformers: ["({self}[0] ** 2 / 2 ** 192) * 1e12", "round2"] # inverse of (sqrtPriceX96 / (2**96))**2 * usdc wei per unit

  # polygon prices
  - name: UniswapPolyFeeds
    interval: s30
    resource_type: timeseries
    data:
      - name: ETHUSDC
        type: float64
        target: "137:0x45dda9cb7c25131df268515131f647d726f50608"
        selector: slot0()((uint160,int24,uint16,uint16,uint16,uint8,bool))
        params: []
        transformers: ["2 ** 192 / ({self}[0] ** 2) * 1e12", "round2"] # inverse of (sqrtPriceX96 / (2**96))**2 * usdc wei per unit
      - name: BTCUSDC # BTCETH * ETHUSDC
        type: float64
        target: "137:0x50eaedb835021e4a108b7290636d62e9765cc6d7" # chainId:address
        selector: slot0()((uint160,int24,uint16,uint16,uint16,uint8,bool))
        params: []
        transformers: ["((({self}[0] ** 2) / 2 ** 192) / 1e10) * {ETHUSDC}", "round2"]

  - name: QuickSwapPolyFeeds # algebra fork
    interval: s30
    resource_type: timeseries
    data:
      - name: ETHUSDC
        type: float64
        target: "137:0x55CAaBB0d2b704FD0eF8192A7E35D8837e678207"
        selector: globalState()((uint160,int24,uint16,uint16,uint8,uint8,bool))
        params: []
        transformers: ["2 ** 192 / ({self}[0] ** 2) * 1e12", "round2"]
      - name: BTCUSDC # BTCETH * ETHUSDC
        type: float64
        target: "137:0xAC4494e30a85369e332BDB5230d6d694d4259DbC" # chainId:address
        selector: globalState()((uint160,int24,uint16,uint16,uint8,uint8,bool))
        params: []
        transformers: ["((({self}[0] ** 2) / 2 ** 192) / 1e10) * {ETHUSDC}", "round2"]

  # optimism prices
  - name: UniswapOpFeeds
    interval: s30
    resource_type: timeseries
    data:
      - name: ETHUSDC
        type: float64
        target: "10:0x85149247691df622eaf1a8bd0cafd40bc45154a9"
        selector: slot0()((uint160,int24,uint16,uint16,uint16,uint8,bool))
        params: []
        transformers: ["({self}[0] ** 2 / 2 ** 192) * 1e12", "round2"]
      - name: BTCUSDC # BTCETH * ETHUSDC
        type: float64
        target: "10:0x85c31ffa3706d1cce9d525a00f1c7d4a2911754c" # chainId:address
        selector: slot0()((uint160,int24,uint16,uint16,uint16,uint8,bool))
        params: []
        transformers: ["((2 ** 192 / {self}[0] ** 2) / 1e10) * {ETHUSDC}", "round2"]

  - name: VelodromeOpFeeds
    interval: s30
    resource_type: timeseries
    data:
      - name: ETHUSDC
        type: float64
        target: "10:0x3241738149b24c9164da14fa2040159ffc6dd237"
        selector: slot0()((uint160,int24,uint16,uint16,uint16,bool))
        params: []
        transformers: ["2 ** 192 / ({self}[0] ** 2) * 1e12", "round2"]
      - name: BTCUSDC # BTCETH * ETHUSDC
        type: float64
        target: "10:0xe1b9cc9cc17616ce81f0fa5b958d36f789fb2c00" # chainId:address
        selector: slot0()((uint160,int24,uint16,uint16,uint16,bool))
        params: []
        transformers: ["((2 ** 192 / {self}[0] ** 2) / 1e10) * {ETHUSDC}", "round2"]

  # arbitrum prices
  - name: CamelotArbFeeds # algebra fork
    interval: s30
    resource_type: timeseries
    data:
      - name: ETHUSDC
        type: float64
        target: "42161:0xb1026b8e7276e7ac75410f1fcbbe21796e8f7526"
        selector: globalState()((uint160,int24,uint16,uint16,uint16,uint8,uint8,bool))
        params: []
        transformers: ["({self}[0] ** 2 / 2 ** 192) * 1e12", "round2"]
      - name: BTCUSDC # BTCETH * ETHUSDC
        type: float64
        target: "42161:0xd845f7d4f4deb9ff5bcf09d140ef13718f6f6c71" # chainId:address
        selector: globalState()((uint160,int24,uint16,uint16,uint16,uint8,uint8,bool))
        params: []
        transformers: ["(({self}[0] ** 2 / 2 ** 192) / 1e10) * {ETHUSDC}", "round2"]

  - name: UniswapArbFeeds
    interval: s30
    resource_type: timeseries
    data:
      - name: ETHUSDC
        type: float64
        target: "42161:0xc6962004f452be9203591991d15f6b388e09e8d0"
        selector: slot0()((uint160,int24,uint16,uint16,uint16,uint8,bool))
        params: []
        transformers: ["({self}[0] ** 2 / 2 ** 192) * 1e12", "round2"]
      - name: BTCUSDC # BTCETH * ETHUSDC
        type: float64
        target: "42161:0x2f5e87c9312fa29aed5c179e456625d79015299c"
        selector: slot0()((uint160,int24,uint16,uint16,uint16,uint8,bool))
        params: []
        transformers: ["(({self}[0] ** 2 / 2 ** 192) / 1e10) * {ETHUSDC}", "round2"]

  - name: RamsesArbFeeds
    interval: s30
    resource_type: timeseries
    data:
      - name: ETHUSDC
        type: float64
        target: "42161:0x30afbcf9458c3131a6d051c621e307e6278e4110"
        selector: slot0()((uint160,int24,uint16,uint16,uint16,uint8,bool))
        params: []
        transformers: ["({self}[0] ** 2 / 2 ** 192) * 1e12", "round2"]
      - name: BTCUSDC # BTCETH * ETHUSDC
        type: float64
        target: "42161:0x2760cc828b2e4d04f8ec261a5335426bb22d9291"
        selector: slot0()((uint160,int24,uint16,uint16,uint16,uint8,bool))
        params: []
        transformers: ["(({self}[0] ** 2 / 2 ** 192) / 1e10) * {ETHUSDC}", "round2"]

  # linea prices
  - name: LinexLineaFeeds # algebra fork
    interval: s30
    resource_type: timeseries
    data:
      - name: ETHUSDC
        type: float64
        target: "59144:0x3cb104f044db23d6513f2a6100a1997fa5e3f587"
        selector: globalState()((uint160,int24,uint16,uint16,uint16,uint16,bool))
        transformers: ["(2 ** 192 / {self}[0] ** 2) * 1e12", "round2"]
      - name: BTCUSDC # BTCETH * ETHUSDC
        type: float64
        target: "59144:0x8e80016b025c89a6a270b399f5ebfb734be58ada"
        selector: globalState()((uint160,int24,uint16,uint16,uint16,uint16,bool))
        transformers: ["(({self}[0] ** 2 / 2 ** 192) / 1e10) * {ETHUSDC}", "round2"]

  # # mantle prices > issue with multicall 3 given view max gas subsidy on the chain
  # - name: AgniMantleFeeds
  #   interval: s30
  #   resource_type: timeseries
  #   data:
  #     - name: USDCUSDT
  #       type: float64
  #       target: "5000:0x6488f911c6cd86c289aa319c5a826dcf8f1ca065"
  #       selector: slot0()((uint160,int24,uint16,uint16,uint16,uint32,bool))
  #       transformers: ["(2 ** 192 / {self}[0] ** 2) * 1e12", "round6"]
  #       transient: true
  #     - name: ETHUSDC # ETHUSDT * USDCUSDT
  #       type: float64
  #       target: "5000:0x628f7131cf43e88ebe3921ae78c4ba0c31872bd4"
  #       selector: slot0()((uint160,int24,uint16,uint16,uint16,uint32,bool))
  #       params: []
  #       transformers: ["((2 ** 192 / {self}[0] ** 2) * 1e12) / {USDCUSDT}", "round2"]
  #     - name: mETHETH
  #       type: float64
  #       target: "5000:0x94d692afff21e045691971a20df4a9adb482ddf6"
  #       selector: slot0()((uint160,int24,uint16,uint16,uint16,uint32,bool))
  #       transformers: ["({self}[0] ** 2 / 2 ** 192) / 1e10", "round6"]
  #       transient: true
  #     - name: BTCUSDC # BTCmETH * mETHETH * ETHUSDC
  #       type: float64
  #       target: "5000:0x198c826af31938736539e7025d81caa7b8952094"
  #       selector: slot0()((uint160,int24,uint16,uint16,uint16,uint32,bool))
  #       transformers: ["(({self}[0] ** 2 / 2 ** 192) / 1e10) * {mETHETH} * {ETHUSDC}", "round6"]

  # # blast prices
  # - name: ThrusterBlastFeeds # uniswap fork
  #   interval: s30
  #   resource_type: timeseries
  #   data:
  #     - name: ETHUSDC
  #       type: float64
  #       target: "238:0x7f0db0d77d0694f29c3f940b5b1f589fff6ef2e0"
  #       selector: slot0()((uint160,int24,uint16,uint16,uint16,uint8,bool))
  #       params: []
  #       transformers: ["((2 ** 192 / {self}[0] ** 2) * 1e12) / {USDCUSDT}", "round2"]
  #     - name: BTCUSDC # BTCETH * ETHUSDC
  #       type: float64
  #       target: "238:0xecb1c17a51d782ac2757e2ab568d159854b9b4bd"
  #       selector: slot0()((uint160,int24,uint16,uint16,uint16,uint8,bool))
  #       params: []
  #       transformers: ["(({self}[0] ** 2 / 2 ** 192) / 1e10) * {ETHUSDC}", "round2"]

# other collectors
solana: []
ton: []
cosmos: []
sui: []
sei: []
aptos: []
