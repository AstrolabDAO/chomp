# collectors.yml

# html scrappers
scrapper:
  - name: TakeIchiConvoyStats
    interval: m1 # see model.py for available intervals
    resource_type: value # value (inplace document), series, timeseries
    target: https://en.wikipedia.org/wiki/Take_Ichi_convoy
    data:
      - name: Dates
        type: string
        selector: //*[@id="mw-content-text"]/div[1]/div[2]/div/table/tbody/tr[4]/td/table/tbody/tr[1]/td # css selector or xpath
      - name: AmericanTroups
        type: string
        selector: //*[@id="mw-content-text"]/div[1]/div[2]/div/table/tbody/tr[10]/td[1]
      - name: JapaneseTroups
        type: string
        selector: //*[@id="mw-content-text"]/div[1]/div[2]/div/table/tbody/tr[10]/td[2]
      - name: AmericanCasualties
        type: string
        selector: //*[@id="mw-content-text"]/div[1]/div[2]/div/table/tbody/tr[12]/td[1]
      - name: JapaneseCasualties
        type: string
        selector: //*[@id="mw-content-text"]/div[1]/div[2]/div/table/tbody/tr[12]/td[2]

# rest api collectors
http_api:
  - name: CoingeckoPriceFeeds
    interval: m1
    resource_type: timeseries
    target: https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,staked-ether,binancecoin,avalanche-2,wrapped-bitcoin,ripple,solana,the-open-network,polkadot,cardano,bitcoin-cash,matic-network,aptos,first-digital-usd,cosmos,mantle,optimism,arbitrum,sui,arweave,monero,ethena-usde,fantom,celestia,thorchain,coredaoorg,sei-network,usd-coin,tether,frax,dai,manta-network,celo,dogecoin,pepe,shiba-inu,dogwifcoin&vs_currencies=usd
    data:
      - name: USDCUSD
        type: float64
        selector: .usd-coin.usd
      - name: BTCUSDC
        type: float64
        selector: .bitcoin.usd
        transformers: ["{self} * {USDCUSD}", "round2"]
      - name: ETHUSDC
        type: float64
        selector: .ethereum.usd
        transformers: ["{self} * {USDCUSD}", "round2"]
      - name: DOGEUSDC
        type: float64
        selector: .dogecoin.usd
        transformers: ["{self} * {USDCUSD}", "round6"]
      - name: PEPEUSDC
        type: float64
        selector: .pepe.usd
        transformers: ["{self} * {USDCUSD}", "round10"]

ws_api:
  - name: BinancePriceFeeds
    interval: s30
    resource_type: timeseries
    selector: root
    handler: |
      def h(msg, epochs):
        cols = ["bids", "asks", "vbids", "vasks"] if msg['m'] else ["asks", "bids", "vasks", "vbids"]  # agg trade buy/sell side ordering
        hp = [epochs[0].setdefault(cols[0], []), epochs[0].setdefault(cols[1], [])]  # agg trades price history
        hv = [epochs[0].setdefault(cols[2], []), epochs[0].setdefault(cols[3], [])]  # agg trades volume history
        p = [float(msg['p']), 0] # prices
        if len(hp[1]) > 1:
          p[1] = hp[1][-1]
        elif len(epochs) > 1:
          p[1] = epochs[1][cols[1]][-1]
        else:
          p[1] = p[0] # bid == ask if no previous trade available
        v = [float(msg['q']), 0] # volumes
        hp[0].append(p[0])
        hp[1].append(p[1])
        hv[0].append(v[0])
        hv[1].append(v[1])

    data:
      - name: USDCUSDT
        type: float64
        target: wss://stream.binance.com:9443/ws/usdcusdt@trade
        reducer: "lambda epochs: (mean(epochs[0]['bids']) + mean(epochs[0]['asks'])) / 2"
        transformers: ["round6"]
      - name: USDCUSDT_spread
        type: float64
        target: wss://stream.binance.com:9443/ws/usdcusdt@trade
        reducer: "lambda epochs: mean(epochs[0]['asks']) - mean(epochs[0]['bids'])"
        transformers: ["round6"]
      - name: BTCUSDC
        type: float64
        target: wss://stream.binance.com:9443/ws/btcusdt@trade
        reducer: "lambda epochs: (mean(epochs[0]['bids']) + mean(epochs[0]['asks'])) / 2"
        transformers: ["{self} * {USDCUSDT}", "round2"]
      - name: BTCUSDC_spread
        type: float64
        target: wss://stream.binance.com:9443/ws/btcusdt@trade
        reducer: "lambda epochs: mean(epochs[0]['asks']) - mean(epochs[0]['bids'])"
        transformers: ["{self} * {USDCUSDT}", "round2"]
      - name: ETHUSDC
        type: float64
        target: wss://stream.binance.com:9443/ws/ethusdt@trade
        reducer: "lambda epochs: (mean(epochs[0]['bids']) + mean(epochs[0]['asks'])) / 2"
        transformers: ["{self} * {USDCUSDT}", "round2"]
      - name: ETHUSDC_spread
        type: float64
        target: wss://stream.binance.com:9443/ws/ethusdt@trade
        reducer: "lambda epochs: mean(epochs[0]['asks']) - mean(epochs[0]['bids'])"
        transformers: ["{self} * {USDCUSDT}", "round2"]

fix_api: []

# evm collectors
evm:
  - name: ChainlinkPriceFeeds
    interval: m1
    resource_type: timeseries
    data:
      - name: USDCUSD_decimals
        type: uint8
        target: "137:0xfE4A8cc5b5B2366C1B58Bea3858e81843581b2F7" # chainId:address
        selector: decimals()(uint8)
        params: []
      - name: USDCUSD
        type: float64
        target: "137:0xfE4A8cc5b5B2366C1B58Bea3858e81843581b2F7" # chainId:address
        selector: latestRoundData()((uint80,int256,uint256,uint256,uint80))
        params: []
        transformers: ["{self}[1] / 10 ** {USDCUSD_decimals}", "round6"]
      - name: BTCUSD_decimals
        type: uint8
        target: "137:0xc907E116054Ad103354f2D350FD2514433D57F6f"
        selector: decimals()(uint8)
        params: []
      - name: BTCUSDC
        type: float64
        target: "137:0xc907E116054Ad103354f2D350FD2514433D57F6f" # chainId:address
        selector: latestRoundData()((uint80,int256,uint256,uint256,uint80)) # function signature
        params: []
        transformers: ["({self}[1] / 10 ** {BTCUSD_decimals}) * {USDCUSD}", "round2"]
      - name: ETHUSD_decimals
        type: uint8
        target: "137:0xF9680D99D6C9589e2a93a78A04A279e509205945"
        selector: decimals()(uint8)
        params: []
      - name: ETHUSDC
        type: float64
        target: "137:0xF9680D99D6C9589e2a93a78A04A279e509205945"
        selector: latestRoundData()((uint80,int256,uint256,uint256,uint80))
        params: []
        transformers: ["({self}[1] / 10 ** {ETHUSD_decimals}) * {USDCUSD}", "round2"]
      # - name: BTCUSDC.median
      #   type: float64
      #   transformers: ["{EvmValue1::median('W1')}"] # no need for selector if the value is computed

# other collectors
solana: []
ton: []
cosmos: []
sui: []
sei: []
aptos: []
